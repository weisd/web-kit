// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/protobuf-spec/user/user.proto

/*
	Package user is a generated protocol buffer package.

	It is generated from these files:
		api/protobuf-spec/user/user.proto

	It has these top-level messages:
		User
*/
package user

import proto "github.com/gogo/protobuf/proto"
import golang_proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import _ "github.com/gogo/protobuf/types"
import _ "github.com/gogo/googleapis/google/api"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/mwitkow/go-proto-validators"

import time "time"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import types "github.com/gogo/protobuf/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// UserStatus 用户状态
type UserStatus int32

const (
	// 未激活
	UserStatus_None UserStatus = 0
	// 正常
	UserStatus_Normal UserStatus = 1
	// 禁用
	UserStatus_Disable UserStatus = 2
)

var UserStatus_name = map[int32]string{
	0: "None",
	1: "Normal",
	2: "Disable",
}
var UserStatus_value = map[string]int32{
	"None":    0,
	"Normal":  1,
	"Disable": 2,
}

func (x UserStatus) String() string {
	return proto.EnumName(UserStatus_name, int32(x))
}
func (UserStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

// User User
type User struct {
	ID        int64      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Phone     int64      `protobuf:"varint,2,opt,name=phone,proto3" json:"phone,omitempty"`
	Email     string     `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	NickName  string     `protobuf:"bytes,4,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Password  string     `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Salt      string     `protobuf:"bytes,6,opt,name=salt,proto3" json:"salt,omitempty"`
	Avatar    string     `protobuf:"bytes,7,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Status    UserStatus `protobuf:"varint,8,opt,name=status,proto3,enum=user.UserStatus" json:"status,omitempty"`
	CreatedAt *time.Time `protobuf:"bytes,9,opt,name=created_at,json=createdAt,stdtime" json:"created_at,omitempty"`
	UpdatedAt *time.Time `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,stdtime" json:"updated_at,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *User) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetPhone() int64 {
	if m != nil {
		return m.Phone
	}
	return 0
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetStatus() UserStatus {
	if m != nil {
		return m.Status
	}
	return UserStatus_None
}

func (m *User) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (*User) XXX_MessageName() string {
	return "user.User"
}
func init() {
	proto.RegisterType((*User)(nil), "user.User")
	golang_proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterEnum("user.UserStatus", UserStatus_name, UserStatus_value)
	golang_proto.RegisterEnum("user.UserStatus", UserStatus_name, UserStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/user.UserService/AddUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	AddUser(context.Context, *User) (*google_protobuf.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserService_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/user/user.proto",
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.ID))
	}
	if m.Phone != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Phone))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	if len(m.Salt) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Salt)))
		i += copy(dAtA[i:], m.Salt)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintUser(dAtA, i, uint64(types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintUser(dAtA, i, uint64(types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err := types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *User) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUser(uint64(m.ID))
	}
	if m.Phone != 0 {
		n += 1 + sovUser(uint64(m.Phone))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	if m.CreatedAt != nil {
		l = types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			m.Phone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Phone |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (UserStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/protobuf-spec/user/user.proto", fileDescriptorUser) }
func init() { golang_proto.RegisterFile("api/protobuf-spec/user/user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xfe, 0xc7, 0x75, 0x6e, 0x27, 0xfa, 0xab, 0x68, 0x84, 0x8a, 0x95, 0xa2, 0xd4, 0x64, 0x15,
	0x45, 0xd8, 0xa6, 0x41, 0x62, 0x51, 0x16, 0x28, 0x25, 0xa8, 0xea, 0x26, 0x42, 0xe1, 0xb2, 0xa4,
	0x9a, 0xd8, 0x83, 0x33, 0x8a, 0xed, 0x19, 0xcd, 0x4c, 0x62, 0x75, 0xcb, 0x13, 0x20, 0x78, 0x21,
	0x96, 0x5d, 0x22, 0xf5, 0x01, 0x40, 0x29, 0x0f, 0x82, 0x3c, 0x76, 0x9a, 0x0a, 0x58, 0xb0, 0xb1,
	0xcf, 0x77, 0x39, 0x17, 0xfb, 0x1c, 0x78, 0x48, 0x04, 0x0b, 0x84, 0xe4, 0x9a, 0xcf, 0x57, 0x1f,
	0x3c, 0x25, 0x68, 0x18, 0xac, 0x14, 0x95, 0xe6, 0xe1, 0x1b, 0x1e, 0xdb, 0x45, 0xdc, 0x3d, 0x8c,
	0x39, 0x8f, 0x13, 0x7a, 0xeb, 0x0d, 0x68, 0x2a, 0xf4, 0x65, 0x69, 0xe9, 0x1e, 0xfd, 0x2e, 0x6a,
	0x96, 0x52, 0xa5, 0x49, 0x2a, 0x2a, 0xc3, 0x83, 0xca, 0x50, 0x74, 0x23, 0x59, 0xc6, 0x35, 0xd1,
	0x8c, 0x67, 0xaa, 0x52, 0x1f, 0x99, 0x57, 0xe8, 0xc5, 0x34, 0xf3, 0x54, 0x4e, 0xe2, 0x98, 0xca,
	0x80, 0x0b, 0xe3, 0xf8, 0x8b, 0xdb, 0x8b, 0x99, 0x5e, 0xac, 0xe6, 0x7e, 0xc8, 0xd3, 0x20, 0xe6,
	0x31, 0xdf, 0x75, 0x2d, 0x90, 0x01, 0x26, 0xaa, 0xec, 0x4f, 0xef, 0xd8, 0xd3, 0x9c, 0xe9, 0x25,
	0xcf, 0x83, 0x98, 0x7b, 0x46, 0xf4, 0xd6, 0x24, 0x61, 0x11, 0xd1, 0x5c, 0xaa, 0xe0, 0x36, 0x2c,
	0xf3, 0xfa, 0xd7, 0x16, 0xd8, 0x6f, 0x15, 0x95, 0x78, 0x1f, 0xac, 0xf3, 0x89, 0x83, 0x5c, 0x34,
	0xd8, 0x9b, 0x59, 0xe7, 0x13, 0x7c, 0x0f, 0x6a, 0x62, 0xc1, 0x33, 0xea, 0x58, 0x86, 0x2a, 0x41,
	0xc1, 0xd2, 0x94, 0xb0, 0xc4, 0xd9, 0x73, 0xd1, 0xa0, 0x35, 0x2b, 0x01, 0x3e, 0x84, 0x56, 0xc6,
	0xc2, 0xe5, 0x45, 0x46, 0x52, 0xea, 0xd8, 0x46, 0x69, 0x16, 0xc4, 0x94, 0xa4, 0x14, 0x77, 0xa1,
	0x29, 0x88, 0x52, 0x39, 0x97, 0x91, 0x53, 0x2b, 0xb5, 0x2d, 0xc6, 0x18, 0x6c, 0x45, 0x12, 0xed,
	0xd4, 0x0d, 0x6f, 0x62, 0x7c, 0x00, 0x75, 0xb2, 0x26, 0x9a, 0x48, 0xa7, 0x61, 0xd8, 0x0a, 0xe1,
	0x01, 0xd4, 0x95, 0x26, 0x7a, 0xa5, 0x9c, 0xa6, 0x8b, 0x06, 0xfb, 0xa3, 0x8e, 0x6f, 0xb6, 0x57,
	0x0c, 0xff, 0xda, 0xf0, 0xb3, 0x4a, 0xc7, 0xcf, 0x01, 0x42, 0x49, 0x89, 0xa6, 0xd1, 0x05, 0xd1,
	0x4e, 0xcb, 0x45, 0x83, 0xf6, 0xa8, 0xeb, 0x97, 0xbb, 0xf1, 0xb7, 0xbf, 0xd1, 0x7f, 0xb3, 0x5d,
	0xde, 0xa9, 0xfd, 0xe9, 0xfb, 0x11, 0x9a, 0xb5, 0xaa, 0x9c, 0xb1, 0x2e, 0x0a, 0xac, 0x44, 0xb4,
	0x2d, 0x00, 0xff, 0x5a, 0xa0, 0xca, 0x19, 0xeb, 0x61, 0x00, 0xb0, 0x9b, 0x0b, 0x37, 0xc1, 0x9e,
	0xf2, 0x8c, 0x76, 0xfe, 0xc3, 0x00, 0xf5, 0x29, 0x97, 0x29, 0x49, 0x3a, 0x08, 0xb7, 0xa1, 0x31,
	0x61, 0x8a, 0xcc, 0x13, 0xda, 0xb1, 0x46, 0xef, 0xa0, 0x6d, 0x12, 0xa8, 0x5c, 0xb3, 0x90, 0xe2,
	0x33, 0x68, 0x8c, 0xa3, 0xc8, 0xec, 0x05, 0x76, 0x9f, 0xd9, 0x3d, 0xf8, 0x63, 0x86, 0x97, 0xc5,
	0x79, 0xf6, 0x9d, 0x8f, 0xd7, 0x3f, 0xbf, 0x58, 0xb8, 0xff, 0xbf, 0xb9, 0xbc, 0xf5, 0xb1, 0xb9,
	0x6b, 0x75, 0x82, 0x86, 0xa7, 0xef, 0x3f, 0x8f, 0xcf, 0x70, 0x6d, 0xb4, 0x77, 0xec, 0x3f, 0x1e,
	0x22, 0x4b, 0x3e, 0x83, 0xfb, 0xf1, 0xec, 0xd5, 0x0b, 0x37, 0xa7, 0x73, 0x6f, 0xc9, 0xb4, 0x2b,
	0xa9, 0xe0, 0x8a, 0x69, 0x2e, 0x2f, 0xb1, 0xbb, 0xd0, 0x5a, 0xa8, 0x93, 0x20, 0xb8, 0x73, 0x48,
	0x39, 0x65, 0x2a, 0x0a, 0x2a, 0xf3, 0xd5, 0xa6, 0x87, 0xbe, 0x6d, 0x7a, 0xe8, 0xc7, 0xa6, 0x87,
	0xbe, 0xde, 0xf4, 0xd0, 0xd5, 0x4d, 0x0f, 0xcd, 0xeb, 0x66, 0x92, 0x27, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x86, 0x2f, 0x19, 0xbf, 0x61, 0x03, 0x00, 0x00,
}
