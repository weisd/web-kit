syntax = "proto3";

package user;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/duration.proto";
// import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/mwitkow/go-proto-validators/validator.proto";

// 生成的路径及文件名
// option go_package = "github.com/weisd/web-kit/api/protobuf-spec;user";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/weisd/web-kit";
    description: "gRPC web-kit repository";
  }
  schemes: HTTPS;
};

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;


// RPCService RPC for backend 
service RPCService {

    // Create 创建用户
    rpc Create(User) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/creae"
            body: "*"
        };
    }

    // UpdatePassword 更新密码
    rpc UpdatePassword(IDPassword) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/password"
            body: "*"
        };
    }

    // UpdatePhone  更新手机号
    rpc UpdatePhone(IDPhone) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/phone"
            body: "*"
        };
    }

    // UpdateEmail 更新email
    rpc UpdateEmail(IDEmail) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/email"
            body: "*"
        };
    }

    // UpdateNickname 更新昵称
    rpc UpdateNickname(IDNickname) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/nickname"
            body: "*"
        };
    }

    // UpdateAvatar 更新头像
    rpc UpdateAvatar(IDAvatar) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/avatar"
            body: "*"
        };
    }

    // UpdateStatus 更新状态
    rpc UpdateStatus(IDStatus) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/rpc/user/v1/update/status"
            body: "*"
        };
    }
    
    // InfoByID 通过id查询 
    rpc InfoByID(ID) returns (User) {
        option (google.api.http) = {
            get: "/rpc/user/v1/info/id"
        };
    }

    // InfoByPhone 通过手机查询
    rpc InfoByPhone(Phone) returns (User) {
        option (google.api.http) = {
            get: "/rpc/user/v1/info/phone"
        };
    }

    // InfoByEmail 通过email查询
    rpc InfoByEmail(Email) returns (User) {
        option (google.api.http) = {
            get: "/rpc/user/v1/info/email"
        };
    }

    // InfoByAccount 通过 手机、email、昵称查询
    rpc InfoByAccount(Account) returns (User) {
        option (google.api.http) = {
            get: "/rpc/user/v1/info/account"
        };
    }
}

// UserStatus 用户状态
enum UserStatus {
    // 未激活
    None = 0;
    // 正常
    Normal = 1;
    // 禁用
    Disable = 2;
}

// User User
message User {
    int64 ID = 1;
    int64 phone = 2;
    string email = 3;
    string nick_name = 4;
    string password = 5;
    string salt = 6;
    string avatar = 7;
    UserStatus status = 8;
    google.protobuf.Timestamp created_at = 9 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated_at = 10 [(gogoproto.stdtime) = true];
}

// ID ID
message ID {
    int64 ID = 1;
}

// Phone Phone
message Phone {
    string phone = 1;
}

// Email Email
message Email {
    string email = 1;
}

// Nickname Nickname
message Nickname {
    string nickname = 1;
}

message Account {
    string account = 1;
}

// IDPassword IDPassword
message IDPassword {
    int64 ID = 1;
    string password = 2;
}

// IDPhone IDPhone
message IDPhone {
    int64 ID = 1;
    string phone = 2;
}

// IDEmail IDEmail
message IDEmail {
    int64 ID = 1;
    string email = 2;
}

// IDNickname IDNickname
message IDNickname {
    int64 ID = 1;
    string nick_name = 2;
}

// IDAvatar IDAvatar
message IDAvatar {
    int64 ID = 1;
    string avatar = 2;
}

// IDStatus IDStatus
message IDStatus {
    int64 ID = 1;
    UserStatus status = 2;
}